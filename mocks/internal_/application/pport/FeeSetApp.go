// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	feeset "github.com/andriykusevol/aktemplategorm/internal/domain/aggregate/feeset"
	feerange "github.com/andriykusevol/aktemplategorm/internal/domain/entity/feerange"

	mock "github.com/stretchr/testify/mock"

	money "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/money"

	patch "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/patch"

	psp "github.com/andriykusevol/aktemplategorm/internal/domain/entity/psp"

	queryfilter "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/queryfilter"

	request "github.com/andriykusevol/aktemplategorm/internal/adapters/driving/restapi/request"

	response "github.com/andriykusevol/aktemplategorm/internal/adapters/driving/restapi/response"
)

// FeeSetApp is an autogenerated mock type for the FeeSetApp type
type FeeSetApp struct {
	mock.Mock
}

// AddMobileProviderFeeRange provides a mock function with given fields: ctx, feeRange
func (_m *FeeSetApp) AddMobileProviderFeeRange(ctx context.Context, feeRange feerange.FeeRange) error {
	ret := _m.Called(ctx, feeRange)

	if len(ret) == 0 {
		panic("no return value specified for AddMobileProviderFeeRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, feerange.FeeRange) error); ok {
		r0 = rf(ctx, feeRange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMobileProviderFeeSet provides a mock function with given fields: ctx, feesetAggregate
func (_m *FeeSetApp) AddMobileProviderFeeSet(ctx context.Context, feesetAggregate *feeset.FeeSet) error {
	ret := _m.Called(ctx, feesetAggregate)

	if len(ret) == 0 {
		panic("no return value specified for AddMobileProviderFeeSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *feeset.FeeSet) error); ok {
		r0 = rf(ctx, feesetAggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkCalculateFeeForAmount provides a mock function with given fields: ctx, req
func (_m *FeeSetApp) BulkCalculateFeeForAmount(ctx context.Context, req request.BulkFeeRequest) (response.BulkFeeResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BulkCalculateFeeForAmount")
	}

	var r0 response.BulkFeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.BulkFeeRequest) (response.BulkFeeResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.BulkFeeRequest) response.BulkFeeResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.BulkFeeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.BulkFeeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateFeeForAmount provides a mock function with given fields: ctx, pspCode, amount
func (_m *FeeSetApp) CalculateFeeForAmount(ctx context.Context, pspCode string, amount money.Money) (float64, float64, error) {
	ret := _m.Called(ctx, pspCode, amount)

	if len(ret) == 0 {
		panic("no return value specified for CalculateFeeForAmount")
	}

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, money.Money) (float64, float64, error)); ok {
		return rf(ctx, pspCode, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, money.Money) float64); ok {
		r0 = rf(ctx, pspCode, amount)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, money.Money) float64); ok {
		r1 = rf(ctx, pspCode, amount)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, money.Money) error); ok {
		r2 = rf(ctx, pspCode, amount)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeletePSP provides a mock function with given fields: ctx, psp_id
func (_m *FeeSetApp) DeletePSP(ctx context.Context, psp_id uint) error {
	ret := _m.Called(ctx, psp_id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, psp_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeeRange provides a mock function with given fields: ctx, feerange_id
func (_m *FeeSetApp) GetFeeRange(ctx context.Context, feerange_id uint) (*feerange.FeeRange, error) {
	ret := _m.Called(ctx, feerange_id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeRange")
	}

	var r0 *feerange.FeeRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*feerange.FeeRange, error)); ok {
		return rf(ctx, feerange_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *feerange.FeeRange); ok {
		r0 = rf(ctx, feerange_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feerange.FeeRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, feerange_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPSP provides a mock function with given fields: ctx, id
func (_m *FeeSetApp) GetPSP(ctx context.Context, id uint) (*psp.PSP, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPSP")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*psp.PSP, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *psp.PSP); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeeRange provides a mock function with given fields: ctx, pspFeeSetID
func (_m *FeeSetApp) ListFeeRange(ctx context.Context, pspFeeSetID uint) ([]*feerange.FeeRange, error) {
	ret := _m.Called(ctx, pspFeeSetID)

	if len(ret) == 0 {
		panic("no return value specified for ListFeeRange")
	}

	var r0 []*feerange.FeeRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*feerange.FeeRange, error)); ok {
		return rf(ctx, pspFeeSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*feerange.FeeRange); ok {
		r0 = rf(ctx, pspFeeSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feerange.FeeRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, pspFeeSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPSP provides a mock function with given fields: ctx, psp_id, psp_code
func (_m *FeeSetApp) ListPSP(ctx context.Context, psp_id *uint, psp_code *string) ([]psp.PSP, error) {
	ret := _m.Called(ctx, psp_id, psp_code)

	if len(ret) == 0 {
		panic("no return value specified for ListPSP")
	}

	var r0 []psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *string) ([]psp.PSP, error)); ok {
		return rf(ctx, psp_id, psp_code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *string) []psp.PSP); ok {
		r0 = rf(ctx, psp_id, psp_code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint, *string) error); ok {
		r1 = rf(ctx, psp_id, psp_code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PspAdd provides a mock function with given fields: ctx, _a1
func (_m *FeeSetApp) PspAdd(ctx context.Context, _a1 *psp.PSP) (*psp.PSP, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PspAdd")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *psp.PSP) (*psp.PSP, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *psp.PSP) *psp.PSP); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *psp.PSP) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PspUpdateByID provides a mock function with given fields: ctx, id, p
func (_m *FeeSetApp) PspUpdateByID(ctx context.Context, id uint, p patch.Patch) (*psp.PSP, error) {
	ret := _m.Called(ctx, id, p)

	if len(ret) == 0 {
		panic("no return value specified for PspUpdateByID")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, patch.Patch) (*psp.PSP, error)); ok {
		return rf(ctx, id, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, patch.Patch) *psp.PSP); ok {
		r0 = rf(ctx, id, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, patch.Patch) error); ok {
		r1 = rf(ctx, id, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryFilterPSP provides a mock function with given fields: ctx, qf
func (_m *FeeSetApp) QueryFilterPSP(ctx context.Context, qf queryfilter.QueryFilter) ([]psp.PSP, *queryfilter.Pagination, error) {
	ret := _m.Called(ctx, qf)

	if len(ret) == 0 {
		panic("no return value specified for QueryFilterPSP")
	}

	var r0 []psp.PSP
	var r1 *queryfilter.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, queryfilter.QueryFilter) ([]psp.PSP, *queryfilter.Pagination, error)); ok {
		return rf(ctx, qf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queryfilter.QueryFilter) []psp.PSP); ok {
		r0 = rf(ctx, qf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queryfilter.QueryFilter) *queryfilter.Pagination); ok {
		r1 = rf(ctx, qf)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*queryfilter.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, queryfilter.QueryFilter) error); ok {
		r2 = rf(ctx, qf)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryPSP provides a mock function with given fields: ctx, domainQuery
func (_m *FeeSetApp) QueryPSP(ctx context.Context, domainQuery psp.Query) ([]psp.PSP, *queryfilter.Pagination, error) {
	ret := _m.Called(ctx, domainQuery)

	if len(ret) == 0 {
		panic("no return value specified for QueryPSP")
	}

	var r0 []psp.PSP
	var r1 *queryfilter.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, psp.Query) ([]psp.PSP, *queryfilter.Pagination, error)); ok {
		return rf(ctx, domainQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, psp.Query) []psp.PSP); ok {
		r0 = rf(ctx, domainQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, psp.Query) *queryfilter.Pagination); ok {
		r1 = rf(ctx, domainQuery)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*queryfilter.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, psp.Query) error); ok {
		r2 = rf(ctx, domainQuery)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateFeeRange provides a mock function with given fields: ctx, p
func (_m *FeeSetApp) UpdateFeeRange(ctx context.Context, p patch.Patch) {
	_m.Called(ctx, p)
}

// NewFeeSetApp creates a new instance of FeeSetApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeSetApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeSetApp {
	mock := &FeeSetApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
