// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	logger "github.com/andriykusevol/aktemplategorm/internal/adapters/driving/logger"

	mock "github.com/stretchr/testify/mock"
)

// ApiLogger is an autogenerated mock type for the ApiLogger type
type ApiLogger struct {
	mock.Mock
}

// CreateApiLogData provides a mock function with given fields: fields
func (_m *ApiLogger) CreateApiLogData(fields ...logger.ApiLogDataField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// CreateApiLogPayload provides a mock function with given fields: fields
func (_m *ApiLogger) CreateApiLogPayload(fields ...logger.ApiLogDataPayloadField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewApiLogger creates a new instance of ApiLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiLogger {
	mock := &ApiLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
