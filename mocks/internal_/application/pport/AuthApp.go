// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "github.com/andriykusevol/aktemplategorm/internal/domain/entity/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthApp is an autogenerated mock type for the AuthApp type
type AuthApp struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ctx, userID
func (_m *AuthApp) GenerateToken(ctx context.Context, userID string) (*auth.Auth, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Auth, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Auth); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, userName, password
func (_m *AuthApp) Verify(ctx context.Context, userName string, password string) (*auth.User, error) {
	ret := _m.Called(ctx, userName, password)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *auth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*auth.User, error)); ok {
		return rf(ctx, userName, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *auth.User); ok {
		r0 = rf(ctx, userName, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthApp creates a new instance of AuthApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthApp {
	mock := &AuthApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
