// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	feeset "github.com/andriykusevol/aktemplategorm/internal/domain/aggregate/feeset"
	feerange "github.com/andriykusevol/aktemplategorm/internal/domain/entity/feerange"

	mock "github.com/stretchr/testify/mock"

	patch "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/patch"

	psp "github.com/andriykusevol/aktemplategorm/internal/domain/entity/psp"

	queryfilter "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/queryfilter"
)

// FeeSetRepository is an autogenerated mock type for the FeeSetRepository type
type FeeSetRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, feeSet
func (_m *FeeSetRepository) Add(ctx context.Context, feeSet feeset.FeeSet) error {
	ret := _m.Called(ctx, feeSet)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, feeset.FeeSet) error); ok {
		r0 = rf(ctx, feeSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddFeeRange provides a mock function with given fields: ctx, feeRange
func (_m *FeeSetRepository) AddFeeRange(ctx context.Context, feeRange feerange.FeeRange) error {
	ret := _m.Called(ctx, feeRange)

	if len(ret) == 0 {
		panic("no return value specified for AddFeeRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, feerange.FeeRange) error); ok {
		r0 = rf(ctx, feeRange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPSP provides a mock function with given fields: ctx, _a1
func (_m *FeeSetRepository) AddPSP(ctx context.Context, _a1 psp.PSP) (*psp.PSP, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddPSP")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, psp.PSP) (*psp.PSP, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, psp.PSP) *psp.PSP); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, psp.PSP) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePSP provides a mock function with given fields: ctx, psp_id
func (_m *FeeSetRepository) DeletePSP(ctx context.Context, psp_id uint) error {
	ret := _m.Called(ctx, psp_id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, psp_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, pspCode, pspFeeSetID
func (_m *FeeSetRepository) Get(ctx context.Context, pspCode string, pspFeeSetID uint) (*feeset.FeeSet, error) {
	ret := _m.Called(ctx, pspCode, pspFeeSetID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *feeset.FeeSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) (*feeset.FeeSet, error)); ok {
		return rf(ctx, pspCode, pspFeeSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) *feeset.FeeSet); ok {
		r0 = rf(ctx, pspCode, pspFeeSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeset.FeeSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, pspCode, pspFeeSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActive provides a mock function with given fields: ctx, PspID
func (_m *FeeSetRepository) GetActive(ctx context.Context, PspID uint) (*feeset.FeeSet, error) {
	ret := _m.Called(ctx, PspID)

	if len(ret) == 0 {
		panic("no return value specified for GetActive")
	}

	var r0 *feeset.FeeSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*feeset.FeeSet, error)); ok {
		return rf(ctx, PspID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *feeset.FeeSet); ok {
		r0 = rf(ctx, PspID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeset.FeeSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, PspID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeeRange provides a mock function with given fields: ctx, feerange_id
func (_m *FeeSetRepository) GetFeeRange(ctx context.Context, feerange_id uint) (*feerange.FeeRange, error) {
	ret := _m.Called(ctx, feerange_id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeRange")
	}

	var r0 *feerange.FeeRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*feerange.FeeRange, error)); ok {
		return rf(ctx, feerange_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *feerange.FeeRange); ok {
		r0 = rf(ctx, feerange_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feerange.FeeRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, feerange_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPspByCode provides a mock function with given fields: ctx, psp_code
func (_m *FeeSetRepository) GetPspByCode(ctx context.Context, psp_code string) (*psp.PSP, error) {
	ret := _m.Called(ctx, psp_code)

	if len(ret) == 0 {
		panic("no return value specified for GetPspByCode")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*psp.PSP, error)); ok {
		return rf(ctx, psp_code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *psp.PSP); ok {
		r0 = rf(ctx, psp_code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, psp_code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPspByID provides a mock function with given fields: ctx, psp_id
func (_m *FeeSetRepository) GetPspByID(ctx context.Context, psp_id uint) (*psp.PSP, error) {
	ret := _m.Called(ctx, psp_id)

	if len(ret) == 0 {
		panic("no return value specified for GetPspByID")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*psp.PSP, error)); ok {
		return rf(ctx, psp_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *psp.PSP); ok {
		r0 = rf(ctx, psp_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, psp_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmpty provides a mock function with given fields: ctx, pspID
func (_m *FeeSetRepository) IsEmpty(ctx context.Context, pspID uint) (bool, error) {
	ret := _m.Called(ctx, pspID)

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (bool, error)); ok {
		return rf(ctx, pspID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) bool); ok {
		r0 = rf(ctx, pspID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, pspID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, pspCode
func (_m *FeeSetRepository) List(ctx context.Context, pspCode string) ([]feeset.FeeSet, error) {
	ret := _m.Called(ctx, pspCode)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []feeset.FeeSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]feeset.FeeSet, error)); ok {
		return rf(ctx, pspCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []feeset.FeeSet); ok {
		r0 = rf(ctx, pspCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeset.FeeSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pspCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeeRange provides a mock function with given fields: ctx, pspFeeSetID
func (_m *FeeSetRepository) ListFeeRange(ctx context.Context, pspFeeSetID uint) ([]feerange.FeeRange, error) {
	ret := _m.Called(ctx, pspFeeSetID)

	if len(ret) == 0 {
		panic("no return value specified for ListFeeRange")
	}

	var r0 []feerange.FeeRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]feerange.FeeRange, error)); ok {
		return rf(ctx, pspFeeSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []feerange.FeeRange); ok {
		r0 = rf(ctx, pspFeeSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feerange.FeeRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, pspFeeSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPSP provides a mock function with given fields: ctx
func (_m *FeeSetRepository) ListPSP(ctx context.Context) ([]psp.PSP, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPSP")
	}

	var r0 []psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]psp.PSP, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []psp.PSP); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PspUpdateByID provides a mock function with given fields: ctx, id, p
func (_m *FeeSetRepository) PspUpdateByID(ctx context.Context, id uint, p patch.Patch) (*psp.PSP, error) {
	ret := _m.Called(ctx, id, p)

	if len(ret) == 0 {
		panic("no return value specified for PspUpdateByID")
	}

	var r0 *psp.PSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, patch.Patch) (*psp.PSP, error)); ok {
		return rf(ctx, id, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, patch.Patch) *psp.PSP); ok {
		r0 = rf(ctx, id, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, patch.Patch) error); ok {
		r1 = rf(ctx, id, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryFilterPSP provides a mock function with given fields: ctx, queryFilter
func (_m *FeeSetRepository) QueryFilterPSP(ctx context.Context, queryFilter queryfilter.QueryFilter) ([]psp.PSP, *queryfilter.Pagination, error) {
	ret := _m.Called(ctx, queryFilter)

	if len(ret) == 0 {
		panic("no return value specified for QueryFilterPSP")
	}

	var r0 []psp.PSP
	var r1 *queryfilter.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, queryfilter.QueryFilter) ([]psp.PSP, *queryfilter.Pagination, error)); ok {
		return rf(ctx, queryFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queryfilter.QueryFilter) []psp.PSP); ok {
		r0 = rf(ctx, queryFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queryfilter.QueryFilter) *queryfilter.Pagination); ok {
		r1 = rf(ctx, queryFilter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*queryfilter.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, queryfilter.QueryFilter) error); ok {
		r2 = rf(ctx, queryFilter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryPSP provides a mock function with given fields: ctx, domainQuery
func (_m *FeeSetRepository) QueryPSP(ctx context.Context, domainQuery psp.Query) ([]psp.PSP, *queryfilter.Pagination, error) {
	ret := _m.Called(ctx, domainQuery)

	if len(ret) == 0 {
		panic("no return value specified for QueryPSP")
	}

	var r0 []psp.PSP
	var r1 *queryfilter.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, psp.Query) ([]psp.PSP, *queryfilter.Pagination, error)); ok {
		return rf(ctx, domainQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, psp.Query) []psp.PSP); ok {
		r0 = rf(ctx, domainQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psp.PSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, psp.Query) *queryfilter.Pagination); ok {
		r1 = rf(ctx, domainQuery)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*queryfilter.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, psp.Query) error); ok {
		r2 = rf(ctx, domainQuery)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStatus provides a mock function with given fields: ctx, pspFeeSetID, status
func (_m *FeeSetRepository) UpdateStatus(ctx context.Context, pspFeeSetID uint, status bool) error {
	ret := _m.Called(ctx, pspFeeSetID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, bool) error); ok {
		r0 = rf(ctx, pspFeeSetID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeeSetRepository creates a new instance of FeeSetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeSetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeSetRepository {
	mock := &FeeSetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
