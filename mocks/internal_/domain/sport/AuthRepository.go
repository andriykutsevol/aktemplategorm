// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "github.com/andriykusevol/aktemplategorm/internal/domain/entity/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// FundUserByUserName provides a mock function with given fields: ctx, userName
func (_m *AuthRepository) FundUserByUserName(ctx context.Context, userName string) (auth.User, error) {
	ret := _m.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for FundUserByUserName")
	}

	var r0 auth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (auth.User, error)); ok {
		return rf(ctx, userName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.User); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(auth.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: ctx, userID
func (_m *AuthRepository) GenerateToken(ctx context.Context, userID string) (*auth.Auth, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Auth, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Auth); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUserID provides a mock function with given fields: ctx, accessToken
func (_m *AuthRepository) ParseUserID(ctx context.Context, accessToken string) (string, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for ParseUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
