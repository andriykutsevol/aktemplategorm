// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	psp "github.com/andriykusevol/aktemplategorm/internal/domain/entity/psp"
	queryfilter "github.com/andriykusevol/aktemplategorm/internal/domain/valueobject/queryfilter"

	mock "github.com/stretchr/testify/mock"

	response "github.com/andriykusevol/aktemplategorm/internal/adapters/driving/restapi/response"
)

// PspConverterFromDomain is an autogenerated mock type for the PspConverterFromDomain type
type PspConverterFromDomain struct {
	mock.Mock
}

// FromDomainList_PspList provides a mock function with given fields: domainItems
func (_m *PspConverterFromDomain) FromDomainList_PspList(domainItems []psp.PSP) (*response.ListPsp, error) {
	ret := _m.Called(domainItems)

	if len(ret) == 0 {
		panic("no return value specified for FromDomainList_PspList")
	}

	var r0 *response.ListPsp
	var r1 error
	if rf, ok := ret.Get(0).(func([]psp.PSP) (*response.ListPsp, error)); ok {
		return rf(domainItems)
	}
	if rf, ok := ret.Get(0).(func([]psp.PSP) *response.ListPsp); ok {
		r0 = rf(domainItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ListPsp)
		}
	}

	if rf, ok := ret.Get(1).(func([]psp.PSP) error); ok {
		r1 = rf(domainItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromDomain_PaginatedPspList provides a mock function with given fields: domainItems, p
func (_m *PspConverterFromDomain) FromDomain_PaginatedPspList(domainItems []psp.PSP, p queryfilter.Pagination) (*response.PaginatedPspList, error) {
	ret := _m.Called(domainItems, p)

	if len(ret) == 0 {
		panic("no return value specified for FromDomain_PaginatedPspList")
	}

	var r0 *response.PaginatedPspList
	var r1 error
	if rf, ok := ret.Get(0).(func([]psp.PSP, queryfilter.Pagination) (*response.PaginatedPspList, error)); ok {
		return rf(domainItems, p)
	}
	if rf, ok := ret.Get(0).(func([]psp.PSP, queryfilter.Pagination) *response.PaginatedPspList); ok {
		r0 = rf(domainItems, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.PaginatedPspList)
		}
	}

	if rf, ok := ret.Get(1).(func([]psp.PSP, queryfilter.Pagination) error); ok {
		r1 = rf(domainItems, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromDomain_Psp provides a mock function with given fields: _a0
func (_m *PspConverterFromDomain) FromDomain_Psp(_a0 psp.PSP) (response.Psp, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FromDomain_Psp")
	}

	var r0 response.Psp
	var r1 error
	if rf, ok := ret.Get(0).(func(psp.PSP) (response.Psp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(psp.PSP) response.Psp); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.Psp)
	}

	if rf, ok := ret.Get(1).(func(psp.PSP) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPspConverterFromDomain creates a new instance of PspConverterFromDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPspConverterFromDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *PspConverterFromDomain {
	mock := &PspConverterFromDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
