// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	logger "github.com/andriykusevol/aktemplategorm/internal/adapters/driving/logger"

	mock "github.com/stretchr/testify/mock"
)

// ApiLoggerIface is an autogenerated mock type for the ApiLoggerIface type
type ApiLoggerIface struct {
	mock.Mock
}

// CreateApiLogData provides a mock function with given fields: fields
func (_m *ApiLoggerIface) CreateApiLogData(fields ...logger.ApiLogDataField) map[logger.ApiLogDataFieldName]interface{} {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiLogData")
	}

	var r0 map[logger.ApiLogDataFieldName]interface{}
	if rf, ok := ret.Get(0).(func(...logger.ApiLogDataField) map[logger.ApiLogDataFieldName]interface{}); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[logger.ApiLogDataFieldName]interface{})
		}
	}

	return r0
}

// CreateApiLogPayload provides a mock function with given fields: fields
func (_m *ApiLoggerIface) CreateApiLogPayload(fields ...logger.ApiLogDataPayloadField) map[string]interface{} {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiLogPayload")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(...logger.ApiLogDataPayloadField) map[string]interface{}); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// NewApiLoggerIface creates a new instance of ApiLoggerIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiLoggerIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiLoggerIface {
	mock := &ApiLoggerIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
